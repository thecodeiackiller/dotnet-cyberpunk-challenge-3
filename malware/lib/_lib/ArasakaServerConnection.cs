using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using dotnet_cyberpunk_challenge_3.malware.lib._lib.interfaces;

namespace dotnet_cyberpunk_challenge_3.malware.lib._lib
{
    public class ArasakaServerConnection
    {
        public string ConnectionId {get;set;}
        public string DestinationAddress {get;set;}
        public string SourceAddress {get;set;}
        public string ProcessId {get;set;}
        public string Content {get;set;}
        public string SecretKey {get;set;}
        private string DefaultDNSTarget = "8.8.8.8"; // Google

        public ArasakaServerConnection() {
            
        }

        public async virtual Task Initialize() {
            DestinationAddress = _GetDestinationAddress();
            SourceAddress = _GetCurrentSourceIpAddress();
            SecretKey = _GetArasakaSecretKey();

            await SendRequest("establish-connection");
            ConnectionId = Guid.NewGuid().ToString();
            ProcessId = _GetNewProcessId();
            Content = "";
        }

        public async Task<BiotechnicaMessageRoot> SendRequest(string uriPath) {
            return await _SendRequest(uriPath);
        }

        protected string _GetDestinationAddress() {
            string defaultArasakaDestination = "https://my.api.mockaroo.com";
            string arasaka_destination_envvar = Environment.GetEnvironmentVariable("ARASAKA_DESTINATION_SERVER");
            
            if (arasaka_destination_envvar != null && arasaka_destination_envvar != ""){
                return arasaka_destination_envvar;
            } else {
                return defaultArasakaDestination;
            }
        }

        protected async Task<BiotechnicaMessageRoot> _SendRequest(string uriPath){
            HttpClient client = new HttpClient() {
                BaseAddress = new Uri(DestinationAddress),
                Timeout = TimeSpan.FromSeconds(20)
            };
            
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Add("User-Agent", "Arasaka ICE Breaker");
            client.DefaultRequestHeaders.Add("X-API-Key", SecretKey);

            using HttpResponseMessage response = await client.GetAsync($"arasaka/{uriPath}");

            response.EnsureSuccessStatusCode()
                .WriteRequestToConsole();
            
            var jsonResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"{jsonResponse}\n");

            BiotechnicaMessageRoot parsedArasakaResponse = jsonResponse.ToArasakaMessage();
            
            return parsedArasakaResponse;
        }
    
        protected string _GetArasakaSecretKey() {
            if (Environment.GetEnvironmentVariable("ARASAKA_SECRET_KEY") == null || Environment.GetEnvironmentVariable("ARASAKA_SECRET_KEY") == ""){
                // FIXME: TECH DEBT - This IS NOT the right way to do it but is 
                // too much effort at the minute to do it the right way
                // :)
                return "cf7bbbd0";
            } 
            else 
            {
                return Environment.GetEnvironmentVariable("ARASAKA_SECRET_KEY");
            }
        }

        protected void _WriteArasakaSecretKeyToFile() {
            throw new NotImplementedException();
        }

        protected string _GetCurrentSourceIpAddress() {
            string localIP;
            using (Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, 0))
            {
                socket.Connect(DefaultDNSTarget, 65530);
                IPEndPoint endPoint = socket.LocalEndPoint as IPEndPoint;
                localIP = endPoint.Address.ToString();
            }

            return localIP;
        }

        protected string _GetNewProcessId() {
            return new Random().Next(0,20000).ToString();
        }
    }

    public class IceBreakerArasakaTunnelConnection : ArasakaServerConnection
    {
        public EncryptionType TunnelEncryption {get;set;}
        public bool IsEncrypted {get;set;}

        public override async Task Initialize() {
            DestinationAddress = _GetDestinationAddress();
            SourceAddress = _GetCurrentSourceIpAddress();
            SecretKey = _GetArasakaSecretKey();

            await SendRequest("establish-connection");
            ConnectionId = Guid.NewGuid().ToString();
            ProcessId = _GetNewProcessId();
            Content = "";

            IsEncrypted = true;
            TunnelEncryption = EncryptionType.SSL;

        }
    }
}