using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;

namespace dotnet_cyberpunk_challenge_3.malware.lib._lib
{
    public class ServerConnection<T> where T : MessageRoot
    {
        public string ConnectionId {get;set;}
        public string DestinationAddress {get;set;}
        public string SourceAddress {get;set;}
        public string ProcessId {get;set;}
        public string Content {get;set;}
        public string SecretKey {get;set;}
        private string DefaultDNSTarget = "8.8.8.8"; // Google

        public ServerConnection() {
            
        }

        public async virtual Task Initialize() {
            DestinationAddress = _GetDestinationAddress();
            SourceAddress = _GetCurrentSourceIpAddress();
            SecretKey = _GetSecretKey();

            await SendRequest("establish-connection");
            ConnectionId = Guid.NewGuid().ToString();
            ProcessId = _GetNewProcessId();
            Content = "";
        }

        public async Task<T> SendRequest(string uriPath) {
            string fullMessagePath = "";
            if (typeof(T) == typeof(BiotechnicaMessageRoot)) {
                fullMessagePath = $"arasaka/{uriPath}";
            } else if (typeof(T) == typeof(MilitechMessageRoot)) {
                fullMessagePath = $"militech/{uriPath}";
            }
            else if( typeof(T) == typeof(BiotechnicaMessageRoot))
            {
                fullMessagePath = $"biotechnica/{uriPath}";
            }
            else
            {
                throw new NotImplementedException();
                // Will need to catch this thrown exception somewhere either here or it will bubble up and crash our program
            }
            return await _SendRequest(fullMessagePath);
        }

        protected string _GetDestinationAddress() {
            string defaultDestination = "https://my.api.mockaroo.com";
            string destinationEnvvar = Environment.GetEnvironmentVariable("ICE_DESTINATION_SERVER");

            if (destinationEnvvar != null && destinationEnvvar != ""){
                return destinationEnvvar;
            } else {
                return defaultDestination;
            }
        }

        protected async Task<T> _SendRequest(string uriPath){
            HttpClient client = new HttpClient() {
                BaseAddress = new Uri(DestinationAddress),
                Timeout = TimeSpan.FromSeconds(20)
            };
            
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Add("User-Agent", "Kuang Grade Eleven ICE Breaker");
            client.DefaultRequestHeaders.Add("X-API-Key", SecretKey);

            using HttpResponseMessage response = await client.GetAsync(uriPath);

            response.EnsureSuccessStatusCode()
                .WriteRequestToConsole();
            
            var jsonResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"{jsonResponse}\n");

            if (typeof(T) == typeof(BiotechnicaMessageRoot)) {
                return (T)Convert.ChangeType(jsonResponse.ToArasakaMessage(), typeof(T));
            } else if (typeof(T) == typeof(MilitechMessageRoot)) {
                return (T)Convert.ChangeType(jsonResponse.ToMilitechMessage(), typeof(T));
            } 
            else if (typeof(T) == typeof(BiotechnicaMessageRoot))
            {
                return (T)Convert.ChangeType(jsonResponse.ToBiotechnicaMessage(), typeof(T));
                // Cast to result of the converting from json to biotechnica message to T of type T....
                // Convert.ChangeType works for basic types like string and int but not for complex types such as BiotechnicaMessageRoot objects..
            }
            else {
                throw new NotImplementedException("We haven't implemented that type of message yet!");
            }  
        }
    
        protected string _GetSecretKey() {
            if (Environment.GetEnvironmentVariable("ARASAKA_SECRET_KEY") == null || Environment.GetEnvironmentVariable("ARASAKA_SECRET_KEY") == ""){
                // FIXME: TECH DEBT - This IS NOT the right way to do it but is 
                // too much effort at the minute to do it the right way
                // :)
                return "cf7bbbd0";
            } 
            else 
            {
                return Environment.GetEnvironmentVariable("ARASAKA_SECRET_KEY");
            }
        }

        protected void _WriteSecretKeyToFile() {
            throw new NotImplementedException();
        }

        protected string _GetCurrentSourceIpAddress() {
            string localIP;
            using (Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, 0))
            {
                socket.Connect(DefaultDNSTarget, 65530);
                IPEndPoint endPoint = socket.LocalEndPoint as IPEndPoint;
                localIP = endPoint.Address.ToString();
            }

            return localIP;
        }

        protected string _GetNewProcessId() {
            return new Random().Next(0,20000).ToString();
        }
    }

    public class IceBreakerTunnelConnection<T> : ServerConnection<T>
        where T : MessageRoot
    {
        public EncryptionType TunnelEncryption {get;set;}
        public bool IsEncrypted {get;set;}

        public override async Task Initialize() {
            DestinationAddress = _GetDestinationAddress();
            SourceAddress = _GetCurrentSourceIpAddress();
            SecretKey = _GetSecretKey();

            await SendRequest("establish-connection");
            ConnectionId = Guid.NewGuid().ToString();
            ProcessId = _GetNewProcessId();
            Content = "";

            IsEncrypted = true;
            TunnelEncryption = EncryptionType.SSL;

        }
    }
}